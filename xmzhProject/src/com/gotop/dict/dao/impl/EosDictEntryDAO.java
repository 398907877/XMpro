package com.gotop.dict.dao.impl;

import com.gotop.dict.dao.IEosDictEntryDAO;
import com.gotop.dict.model.EosDictEntry;
import com.gotop.dict.model.EosDictType;
import com.gotop.util.dataSource.SqlMapClientDao;
import com.primeton.utils.Page;
import java.util.List;
import java.util.Map;

import org.apache.log4j.Logger;

public class EosDictEntryDAO extends SqlMapClientDao implements IEosDictEntryDAO {
    /**
     * 
     * @abatorgenerated
     */
    protected Logger log = Logger.getLogger(EosDictEntryDAO.class);

    /**
     * This method was generated by Abator for iBATIS.
     * This method corresponds to the database table EOS_DICT_ENTRY
     *
     * @abatorgenerated 
     */
    public EosDictEntryDAO() {
        super();
    }

	@Override
	public List dictTypeList(Map<String, Object> map, Page page) {
		List list = queryForList("EOS_DICT_ENTRY_SqlMap.dictTypeList", map, page);
	      return list;
	}

	@Override
	public List queryDictEntryBydictTypeId(EosDictEntry dictEntry, Page page2) {
		List list = queryForList("EOS_DICT_ENTRY_SqlMap.queryDictEntryBydictTypeId", dictEntry, page2);
		return list;
	}
	
	@Override
	public List queryDictEntryBydictTypeId(EosDictEntry dictEntry) {
		List list = queryForList("EOS_DICT_ENTRY_SqlMap.queryDictEntryBydictTypeId", dictEntry);
		return list;
	}

	@Override
	public EosDictEntry getDictEntryById(EosDictEntry dictEntry) {
		EosDictEntry record = (EosDictEntry) queryForObject("EOS_DICT_ENTRY_SqlMap.getDictEntryById", dictEntry);
		return record;
	}

	@Override
	public void insert(EosDictEntry dictEntry) {
		getSqlMapClientTemplate().insert("EOS_DICT_ENTRY_SqlMap.insert", dictEntry);
		
	}
	
	@Override
	public int updateById(EosDictEntry dictEntry) {
		 int rows = getSqlMapClientTemplate().update("EOS_DICT_ENTRY_SqlMap.updateById", dictEntry);
	        return rows;
	}

	@Override
	public int deleteById(EosDictEntry dictEntry) {
		int rows = getSqlMapClientTemplate().delete("EOS_DICT_ENTRY_SqlMap.deleteById", dictEntry);
        return rows;
	}

	@Override
	public int queryIsExist(EosDictEntry dictEntry) {
		Integer count = queryForCount("EOS_DICT_ENTRY_SqlMap.queryIsExist", dictEntry);
		if(count==null){
			return 0;
		}else{
			return count.intValue();
		}
	}
	//根据dictTypeId查询属性
	@Override
	public EosDictType getEosDictTypeBydictTypeId(EosDictType dictType) {

		return (EosDictType) queryForObject("EOS_DICT_ENTRY_SqlMap.getEosDictTypeBydictTypeId", dictType);
	}

	@Override
	public int updateItemNameBydictTypeId(EosDictType dictType) {
		 int rows = getSqlMapClientTemplate().update("EOS_DICT_ENTRY_SqlMap.updateItemNameBydictTypeId", dictType);
	        return rows;
	}

}